The parser deals with concrete syntax for
  numeric literals: int, floating, infinities
  built-in data types:
    unit
    bool, if-then-else
    pairs
    list
  (expression-level) binders:
    lambdas
    let-binding
    bind

  function definitions
  primitive distributions
  User-defined datatypes
  Patterns and pattern matching
  type annotations


literals: 1, -2, 3.0, -4.5, inf
unit: ()
bool: true, false

if cond:
   tclause
else:
   fclause

pairs:  (one, two)
list:   [one, two, three]
lambda: fn x: y
let:    var = e
        body
bind:   x <~ m
        body

def foo(arg1, arg2):
    body

def foo(arg1 int, arg2 int) int:
    body

primitive distributions: normal, uniform,
	  		 lebesgue, counting,
			 gamma, superpose, dirac

user-defined types:

data either(a, b):
     left(a)
     right(a)

data maybe(a):
     nothing
     just(a)

patterns and pattern-matching:

match e:
  left(x):  e1
  right(x): e2

match e:
  foo(x, _): e1
  _: e2
     
type annotations: 3 :: int, fn (x.nat): x

types: nat, real, prob, int, unit,
       pair(a, b), (a -> b), measure(a)
