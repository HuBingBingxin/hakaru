-- To understand this, see http://haskell.org/cabal/users-guide/

name:                hakaru
version:             0.3.0
synopsis:            A probabilistic programming embedded DSL   
-- description:         
homepage:            http://indiana.edu/~ppaml/
license:             BSD3
license-file:        LICENSE
author:              The Hakaru Team
maintainer:          ppaml@indiana.edu
-- copyright:           
category:            Language
build-type:          Custom 
-- extra-source-files:  
cabal-version:       >=1.16

Flag patchedHint
    Default:     False
    Description: Using the patched version of Hint. 

library
  exposed-modules:     Language.Hakaru.Syntax,
                       Language.Hakaru.Maple,
                       Language.Hakaru.MapleNeue,
                       Language.Hakaru.Lambda,
                       Language.Hakaru.Simplifiable,
                       -- BUG: we need to solve the Typeable issue in order to get Simplify.hs to typecheck again
                       -- Language.Hakaru.Simplify,
                       Language.Hakaru.Any,
                       Language.Hakaru.Util.Csv,
                       --Language.Hakaru.Sampling.Types,
                       --Language.Hakaru.Sampling.Sample,
                       --Language.Hakaru.Sampling.Sampler,
                       --Language.Hakaru.Sampling.Mixture,
                       --Language.Hakaru.Sampling.ImportanceSampler,
                       --Language.Hakaru.Sampling.Metropolis,
                       --Language.Hakaru.Sampling.Distribution,
                       Language.Hakaru.Parser.AST,
                       Language.Hakaru.Parser.Parser,
                       -- Old code which is not used anywhere in the library itself. These may be required by tests, in which case we should translate them to the new AST. If not, then they should be deleted from the repo.
                       -- Language.Hakaru.RoundTrip,
                       -- Language.Hakaru.Vector,
                       -- The new AST stuff. As the above are migrated to the new infrastructure I'll move them below.
                       Language.Hakaru.Syntax.Nat,
                       Language.Hakaru.Syntax.IClasses,
                       Language.Hakaru.Syntax.DataKind,
                       Language.Hakaru.Syntax.Sing,
                       Language.Hakaru.Syntax.HClasses,
                       Language.Hakaru.Syntax.Coercion,
                       Language.Hakaru.Syntax.Datum,
                       Language.Hakaru.Syntax.AST,
                       Language.Hakaru.Syntax.ABT,
                       Language.Hakaru.Syntax.TypeCheck,
                       Language.Hakaru.Syntax.Prelude,
                       Language.Hakaru.Syntax.DatumCase,
                       Language.Hakaru.PrettyPrint,
                       Language.Hakaru.Expect,
                       Language.Hakaru.Disintegrate,
                       Language.Hakaru.Inference

  other-modules:       Language.Hakaru.Util.Extras,
                       Language.Hakaru.Util.Finite,
                       Language.Hakaru.Util.Lex,
                       Language.Hakaru.Util.Pretty,
                       Language.Hakaru.Util.Visual,
                       Language.Hakaru.Paths,  
                       System.MapleSSH
                       -- Old code which is not used anywhere in the library itself. These may be required by tests, in which case we should translate them to the new AST. If not, then they should be deleted from the repo.
                       -- Language.Hakaru.Compose,

  other-extensions:    RankNTypes, BangPatterns, GADTs, TypeFamilies, TypeOperators,
                       ConstraintKinds, FlexibleContexts, NoMonomorphismRestriction,
                       DeriveDataTypeable, ScopedTypeVariables, ExistentialQuantification,
                       StandaloneDeriving, OverloadedStrings,
                       FlexibleInstances, RebindableSyntax

-- LH == Language.Hakaru
-- primitive is used in LH.Types
-- hint is used in Maple
-- process is used in System/MapleSSH
-- containers used for Data.Map.String in LH.Mixture
-- pretty used in LH.PrettyPrint
-- transformer used in LH.Maple
-- math-functions used in LH.Distributions (and in Maple)
-- monad-loops used in LH.Distributions
-- vector used in LH.Util.Csv
-- bytestring used in LH.Util.Csv
-- zlib used in LH.Util.Csv
-- cassava used in LH.Util.Csv
-- text used in LH.Util.Visual
-- aeson used in LH.Util.Visual
-- integration used in LH.Sample
-- ghc-prim is used in LH.RoundTrip
-- filepath is used in Examples/Slam

  build-depends:       base             >= 4.6  && < 5.0, 
                       Cabal            >= 1.16,
                       ghc-prim         >= 0.3  && < 0.5,
                       random           >= 1.0  && < 1.3,
                       transformers     >= 0.3  && < 0.5,
                       containers       >= 0.5  && < 0.6,
                       pretty           >= 1.1  && < 1.2,
                       logfloat         >= 0.12 && < 0.14,
                       math-functions   >= 0.1  && < 0.2,
                       vector           >= 0.10 && < 0.11,
                       indentation      >= 0.2.1,
                       cassava          >= 0.4  && < 0.5,
                       zlib             >= 0.5  && < 0.6,
                       bytestring       >= 0.10 && < 0.11,
                       aeson            >= 0.7  && < 0.11,
                       text             >= 0.11 && < 1.3,
                       -- statistics    >= 0.11 && < 0.14,
                       parsec           >= 3.1  && < 3.2,
                       async            >= 2.0  && < 2.1,
                       -- array         >= 0.4,
                       mwc-random       >= 0.13 && < 0.14,
                       directory        >= 1.2  && < 1.3,
                       integration      >= 0.2.0 && < 0.3.0,
                       primitive        >= 0.5  && < 0.7,
                       parallel         >= 3.2  && < 3.3,
                       monad-loops      >= 0.3.0.2,
                       process          >= 1.1  && < 2.0,
                       HUnit            >= 1.2  && < 2.0,
                       mtl              >= 2.1,
                       generics-sop     >= 0.1.0,
                       filepath         >= 1.1.0.2
                       -- singletons    >= 1.0


  if flag(patchedHint)
    CPP-Options: -DPATCHED_HINT
    -- Available from: <https://github.com/hakaru-dev/hint-exts>
    build-depends: hint-exts >= 0.4.0.0 && < 0.5
  else 
    build-depends: hint >= 0.4.0.0 && < 0.5
    

  -- hs-source-dirs:      
  default-language:    Haskell2010
  ghc-options:         -Wall

test-suite roundtrip_test
    type:              exitcode-stdio-1.0
    main-is:           Tests/TestSuite.hs
    build-depends:     base             >= 4.6  && < 5.0, 
                       Cabal            >= 1.16, 
                       ghc-prim         >= 0.3  && < 0.5,
                       random           >= 1.0  && < 1.3,
                       transformers     >= 0.3  && < 0.5,
                       containers       >= 0.5  && < 0.6,
                       logfloat         >= 0.12 && < 0.14,
                       primitive        >= 0.5  && < 0.7,
                       pretty           >= 1.1  && < 1.2,
                       mwc-random       >= 0.13 && < 0.14,
                       math-functions   >= 0.1  && < 0.2,
                       monad-loops      >= 0.3.0.2,
                       integration      >= 0.2  && < 0.3,
                       HUnit            >= 1.2  && < 2.0,
                       process          >= 1.1  && < 2.0,
                       mtl              >= 2.1,
                       vector           >= 0.10 && < 0.11,
                       text             >= 0.11 && < 1.3,
                       cassava          >= 0.4  && < 0.5,
                       zlib             >= 0.5  && < 0.6,
                       bytestring       >= 0.10 && < 0.11

    if flag(patchedHint)
      CPP-Options: -DPATCHED_HINT
      build-depends: hint-exts >= 0.4.0.0 && < 0.5
    else 
      build-depends: hint >= 0.4.0.0 && < 0.5

    default-language:  Haskell2010
    ghc-options:         -Wall

-- Bench.hs does not exist!
-- benchmark bench-all
--     type:              exitcode-stdio-1.0
--     hs-source-dirs:    Bench
--     main-is:           Bench.hs
--     build-depends:     base, deepseq, ghc-prim,
--                        criterion, hakaru >= 0.1.3
--     ghc-options:       -O2
--     default-language:  Haskell2010
